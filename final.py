import sqlite3
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardButton,
    InlineKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler,
    CallbackQueryHandler, filters, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('tasks.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS tasks
                  (id INTEGER PRIMARY KEY, user_id INTEGER, title TEXT, description TEXT,
                   deadline TEXT, priority INTEGER, status TEXT, notified INTEGER DEFAULT 0,
                   creation_date TEXT, is_deleted INTEGER DEFAULT 0)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS user_activity
                  (id INTEGER PRIMARY KEY, user_id INTEGER, action TEXT, timestamp TEXT)''')
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TITLE, DESCRIPTION, DEADLINE, PRIORITY = range(4)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
        ["‚è± –¢–∞–π–º–µ—Ä –ü–æ–º–æ–¥–æ—Ä–æ", "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"],
        ["üìä –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]
    ], resize_keyboard=True)

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DeadlineBuddy! ü§ñ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
        await list_tasks(update, context)
    elif text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        await delete_task_prompt(update, context)
    elif text == "‚è± –¢–∞–π–º–µ—Ä –ü–æ–º–æ–¥–æ—Ä–æ":
        await pomodoro_menu(update, context)
    elif text == "üìä –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
        await show_user_activity(update, context)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ ConversationHandler
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=ReplyKeyboardRemove())
    return TITLE

async def task_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_task'] = {'title': update.message.text}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return DESCRIPTION

async def task_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_task']['description'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ß–ß:–ú–ú):")
    return DEADLINE

async def task_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        formatted_deadline = format_deadline(update.message.text)
        context.user_data['new_task']['deadline'] = formatted_deadline
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1 - –Ω–∏–∑–∫–∏–π, 2 - —Å—Ä–µ–¥–Ω–∏–π, 3 - –≤—ã—Å–æ–∫–∏–π, 4 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π):")
        return PRIORITY
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return DEADLINE

async def task_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    priority = update.message.text
    if priority not in ['1', '2', '3', '4']:
        await update.message.reply_text("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return PRIORITY

    context.user_data['new_task']['priority'] = int(priority)
    save_task(update.effective_user.id, context.user_data['new_task'])
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=main_menu_keyboard())
    context.user_data.pop('new_task')
    return ConversationHandler.END

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î
def save_task(user_id, task_data):
    cursor.execute('''INSERT INTO tasks (user_id, title, description, deadline, priority, status, creation_date)
                      VALUES (?, ?, ?, ?, ?, ?, ?)''',
                   (user_id, task_data['title'], task_data['description'],
                    task_data['deadline'], task_data['priority'], 'active', datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
def format_deadline(date_str):
    try:
        parts = date_str.split()
        date_part = parts[0]
        time_part = parts[1] if len(parts) > 1 else "23:59"
        now = datetime.now()

        date_components = date_part.split('.')
        if len(date_components) == 1:  # –¢–æ–ª—å–∫–æ –¥–µ–Ω—å —É–∫–∞–∑–∞–Ω
            day = int(date_components[0])
            month = now.month
            year = now.year

            if day < now.day:
                month += 1
                if month > 12:
                    month = 1
                    year += 1

            date_part = f"{day:02}.{month:02}.{year}"
        elif len(date_components) == 2:  # –î–µ–Ω—å –∏ –º–µ—Å—è—Ü
            day, month = map(int, date_components)
            year = now.year

            if month < now.month or (month == now.month and day < now.day):
                year += 1

            date_part = f"{day:02}.{month:02}.{year}"

        datetime.strptime(f"{date_part} {time_part}", "%d.%m.%Y %H:%M")
        return f"{date_part} {time_part}"
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î –∏–ª–∏ –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ß–ß:–ú–ú.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT title, description, deadline, priority FROM tasks WHERE user_id = ? AND status = 'active' AND is_deleted = 0",
                   (update.effective_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    response = "\n\n".join([f"üìå *{task[0]}*\nüìù {task[1]}\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {task[2]}\nüî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task[3]}"
                            for task in tasks])
    await update.message.reply_text(response, parse_mode='Markdown')

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def delete_task_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT id, title FROM tasks WHERE user_id = ? AND status = 'active' AND is_deleted = 0", (update.effective_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    buttons = [[InlineKeyboardButton(f"{task[1]}", callback_data=f"delete_{task[0]}")] for task in tasks]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def handle_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    task_id = int(query.data.split('_')[1])
    cursor.execute("UPDATE tasks SET is_deleted = 1 WHERE id = ?", (task_id,))
    conn.commit()

    await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–∞—è!")
    await query.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=main_menu_keyboard())

# –¢–∞–π–º–µ—Ä –ü–æ–º–æ–¥–æ—Ä–æ
async def pomodoro_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("–†–∞–±–æ—Ç–∞ 25 –º–∏–Ω—É—Ç", callback_data="work_25")],
        [InlineKeyboardButton("–û—Ç–¥—ã—Ö 5 –º–∏–Ω—É—Ç", callback_data="rest_5")],
        [InlineKeyboardButton("–û—Ç–¥—ã—Ö 15 –º–∏–Ω—É—Ç", callback_data="rest_15")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–∞–π–º–µ—Ä–∞:", reply_markup=reply_markup)

async def handle_pomodoro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = context.user_data

    if "timer_task" in user_data and not user_data["timer_task"].done():
        await query.edit_message_text("‚è≥ –¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    command = query.data
    if command.startswith("work_") or command.startswith("rest_"):
        minutes = int(command.split("_")[1])
        await start_timer(query, context, minutes)

async def start_timer(query, context, minutes):
    user_data = context.user_data
    stop_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="stop_timer")]
    ])
    message = await query.edit_message_text(
        f"‚è≥ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.",
        reply_markup=stop_button
    )
    user_data["timer_task"] = asyncio.create_task(timer_task(message, context, minutes))

async def timer_task(message, context, minutes):
    user_data = context.user_data
    try:
        total_seconds = minutes * 60
        for remaining in range(total_seconds, -1, -1):
            minutes_left, seconds_left = divmod(remaining, 60)
            await message.edit_text(
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {minutes_left:02}:{seconds_left:02}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="stop_timer")]
                ])
            )
            await asyncio.sleep(1)
        log_pomodoro(message.chat_id, minutes)
        await message.edit_text("‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üí™")
    except asyncio.CancelledError:
        await message.edit_text("‚èπ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        user_data.pop("timer_task", None)

async def stop_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_data = context.user_data

    if "timer_task" in user_data and not user_data["timer_task"].done():
        user_data["timer_task"].cancel()
        await query.edit_message_text("‚èπ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

def log_pomodoro(user_id, minutes):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('''INSERT INTO user_activity (user_id, action, timestamp)
                      VALUES (?, ?, ?)''', (user_id, f"–†–∞–±–æ—á–∏–π —Ç–∞–π–º–µ—Ä {minutes} –º–∏–Ω—É—Ç", timestamp))
    conn.commit()

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def get_activity_data(user_id):
    now = datetime.now()
    week_ago = now - timedelta(days=7)
    month_ago = now - timedelta(days=30)

    # –ó–∞–¥–∞—á–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    cursor.execute('''SELECT COUNT(*) FROM tasks WHERE user_id = ? AND datetime(creation_date) >= ?''', (user_id, week_ago))
    tasks_week = cursor.fetchone()[0] or 0

    # –ó–∞–¥–∞—á–∏ –∑–∞ –º–µ—Å—è—Ü
    cursor.execute('''SELECT COUNT(*) FROM tasks WHERE user_id = ? AND datetime(creation_date) >= ?''', (user_id, month_ago))
    tasks_month = cursor.fetchone()[0] or 0

    # –í—Å–µ –∑–∞–¥–∞—á–∏
    cursor.execute('''SELECT COUNT(*) FROM tasks WHERE user_id = ?''', (user_id,))
    tasks_all_time = cursor.fetchone()[0] or 0

    # –í—Ä–µ–º—è –ü–æ–º–æ–¥–æ—Ä–æ
    cursor.execute('''SELECT SUM(CAST(SUBSTR(action, 14) AS INTEGER)) FROM user_activity 
                      WHERE user_id = ? AND action LIKE "–†–∞–±–æ—á–∏–π —Ç–∞–π–º–µ—Ä%"''', (user_id,))
    pomodoro_minutes = cursor.fetchone()[0] or 0

    return tasks_week, tasks_month, tasks_all_time, pomodoro_minutes

async def show_user_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks_week, tasks_month, tasks_all_time, pomodoro_minutes = get_activity_data(user_id)

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if tasks_week == 0 and tasks_month == 0 and tasks_all_time == 0:
        await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ü–æ–º–æ–¥–æ—Ä–æ.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    activity_report = (
        f"üìä *–í–∞—à –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*\n\n"
        f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {tasks_week} –∑–∞–¥–∞—á\n"
        f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {tasks_month} –∑–∞–¥–∞—á\n"
        f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {tasks_all_time}\n"
        f"‚è≥ –í—Ä–µ–º—è –≤ –ü–æ–º–æ–¥–æ—Ä–æ: {pomodoro_minutes} –º–∏–Ω—É—Ç\n"
    )

    await update.message.reply_text(activity_report, parse_mode='Markdown')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token("7817193916:AAEzU7e5ymaRa2QmoO3xDgFvZeWP-jOhu18").build()

    task_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task)],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_title)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_description)],
            DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_deadline)],
            PRIORITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_priority)],
        },
        fallbacks=[CommandHandler("cancel", start)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("activity", show_user_activity))
    app.add_handler(task_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    app.add_handler(CallbackQueryHandler(handle_delete, pattern="^delete_.*"))
    app.add_handler(CallbackQueryHandler(handle_pomodoro, pattern="^(work|rest)_.*"))
    app.add_handler(CallbackQueryHandler(stop_timer, pattern="^stop_timer$"))

    app.run_polling()

if __name__ == "__main__":
    main()